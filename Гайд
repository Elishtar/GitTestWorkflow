Главные ветки:
master
develop

Мы используем следующие типы ветвей:
Ветви функциональностей (Feature branches)
Ветви релизов (Release branches)
Ветви исправлений (Hotfix branches)

Ветви функциональностей (feature branches)
Могут порождаться от: develop
Должны вливаться в: develop
Соглашение о наименовании: всё, за исключением master, develop, release-* или hotfix-*
Примечаник: предпочтительно называть именем задачи.

При начале работы над новой функциональностью делается ответвление от ветви разработки (develop).

git checkout -b myfeature develop

Завершённая функциональность вливается обратно в ветвь разработки (develop) и попадает в следующий релиз.

Переключение на ветку develop
git checkout develop

Мерж изменений из ветки myfeature(--no-ff запрещает гиту делать объединение веток без мерж коммита)
git merge --no-ff myfeature

Удаление ветки myfeature
git branch -d myfeature

Вливание изменений в ветку develop
git push origin develop

Ветви релизов (release branches)

Могут порождаться от: develop
Должны вливаться в: develop и master
Соглашение о наименовании: release-*

git checkout -b release-1.1

git commit -a -m "Commit change"

Эта новая ветвь может существовать ещё некоторое время, до тех пор, пока новый релиз окончательно не будет готов к выпуску. В течение этого времени к этой ветви (а не к develop) могут быть добавлены исправления найденных багов. Но добавление крупных новых изменений в эту ветвь строго запрещено. Они всегда должны вливаться в ветвь разработки (develop) и ждать следующего большого релиза.

Закрытие ветви релиза

Когда мы решаем, что ветвь релиза (release branch) окончательно готова для выпуска, нужно проделать несколько действий. В первую очередь ветвь релиза вливается в главную ветвь (напоминаю, каждый коммит в master — это по определению новый релиз). Далее, этот коммит в master должен быть помечен тегом, чтобы в дальнейшем можно было легко обратиться к любой существовавшей версии продукта. И наконец, изменения, сделанные в ветви релиза (release branch), должны быть добавлены обратно в разработку (ветвь develop), чтобы будущие релизы также содержали внесённые исправления багов.


git checkout master

git merge --no-ff release-1.1

git tag -a 1.1 -m "Tag message"

Необходимо также влить изменения сделанные в release(исправления багов) в develop

git checkout develop

git merge --no-ff release-1.1

после этого можно удалять релизную ветку

git branch -d release-1.2


